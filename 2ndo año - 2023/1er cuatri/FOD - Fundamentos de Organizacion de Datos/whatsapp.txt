






Grafos
Grafos dirigidos: gravos qie todos los vertices son vidireccionales
Grafos 
Adyacentes: los nodos que estan conectados
Incide: el nodo que emite / manda
Grado entrada: la cantidad de vertices que reciben datos
Grado salida: La cantidad de vertices que emite

Ciclo: cuando empieza y termina en un mismo nodo
Bucle: ciclo de longitud 1


Camino: recorrido de un nodo a otro
Camino simple: caminos que no repite ningun vertice, exepto tal vez el primero y el ultimo

Subgrafo: cuando C' tiene el mismo conjunto de vertices que C

Subgrafo inducido: ademas C' debe tener las mismas aristas que C

Grafo ponderado, pesado: cuando el uso de los arcos o aristas tienen un costo

Conexo: cuando existe un camino entre todo vertice

Bosque: grafo sin ciclos

Arbol libre:  arbol conexo

Arbol: es un arbol libre, donde un nodo es asignado como raiz




Grafos no dirigidos:
Fuertemente conexo: existe un camino para todo par de vertices
Debilmente conexo: cuando no es fuertemente, pero si ignoramos sentido si hay camino

Componente conexo: cuando un sub arbol es conexo

Componente fuertemente conexo / devilmente conexo


Representacion grafo
V= vertices
E = aristas
Se duplican los valores
Matriz de V². V x V.
.   Costo espacial O(V²)
.   Costo acceso T(V,E) O(1)
Lista de adyacencias.
.   Costo O(|V||E|)
.   Costo acceso


Recorridos:
DFS: deep for search
.   recorrido en profundidad
.   O(V + E)

BFS: 
.    Recorrido por niveles

////

satureacion encadenada. Cuando el registro a ingresar tiene el nodo ocupado por un intruso, este se debera almacenar en otro nodo, como se deja la direccion del nodo a almacenar? ya que en su nodo correspondiente va a estar otro dato y guardando las direccion del sinonimo de ese dato


Si la funcion de hash da un numero mayor a la cantidad de nodos, como se cuenta?



Grafo dirigido:
Fuertemente conexo
Devilmente conexo 
Nada

Grafo no dirigido:
Conexo
No conexo






Dfs
Débilmente conexo puede requerir mas de un recorrido
Fuertemente conexo, en unrscorrido de podria



Aristas:

Aristas back: vertice ya conocido del mismo arbol
 
Arista foward (avanze): que no es bosque


Arista cross (cruze): vertice ya conocido pero de otro arbol


Si grafo dirigido: recorrdio DFS
Conexo:
Un solo recorrido desde cualquoer vertice

No conexo:
Unrecorrido dara un componente conexo, se puede requerir multiples recorridos


Encontrar componentes fuertemente conexos de un grafo dirigido:
-recorrido en profundidad apilando en post orden
-se crea un grafo reverso
-se genera u nsegundo dfs desapilando la pila


P3E8:
Si llamo desde un procedimiento a una funcion que hace un recorrido del archivo, al finalizar dicha funcion (en la cual no realizo ningun close) en el metodo me quedaria el puntero donde la funcion lo dejo no?

El fin de reset es unicamente colocar el puntero en la posicion 0? seria lo mismo hacer un seek si el archivo ya lo habia abierto en otro metodo?

El archivo empieza desde la direccion 0 no?


Se valora en las bajas logicas el mantener la mayor cantidad de datos posibles, vale la pena crear una variable para el caso de lista invertida?


Sat prgo encadenada, si se borra el inicio de la lista, se pasa el ultimo dato al principio?



FOD: 
Es correcto hacer un assign en un procedimiento, o se deberia hacer unicamente en el main

Ordenacion tipoluguca ayed:
Nose puede hacer en ciclicos
Unicamente con grafos 

Ordenacion 1: O(v²)
 Genera un vector de vertices con su grado de entrada
Entra a un vertice de grado 0
Le resta es 1 el grado de los vertices salientes


Ordenacion 2: O(v)
Se puede pila o cola.
Hace una pila de los vertides de GE =0
Desapila, resta 1 a GE vertices adyacentes
Encola los vertices GE =0

Ordenacion 3:
Recorre en DFS, en post orden
.   Se van numerando y poniendo en una lista
.   Igual, se van apilando en el backtraking



COMPU NAI Laptop vostro 14 3000 dell

Acceso Unico UNLP:
julian.quintana
qj2002


Linti:
DNI
Qj+2002


Ideas
Dni
Qj20

DNI
Leo:
21.921.057
Cori
24.421.335



