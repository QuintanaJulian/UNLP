DML (data manipulation linguaje):
Comandos: (mantener este orden)
CREATE VIEW tablaNueva( 		(crea una tabla que se guarda con el nombre "tablaNueva", cerrar con ")") (vista o subconsulta nominada)
SELECT atr1, atr2, at3			(seleccion atr1, atr2, atr3)
FROM tabla1, tabla2			(del join de tabla1 y 2)(La ',' indica producto cartesiano o join)
WHERE atr4="hola"			(donde atr4= "hola")
ORDER BY nombre Desc 
GROUP BY tabla1.var
HAVING SUM(tabla1.monto) > 1000		(operacion del GROUP BY)(Filtra los grupos que el monto sea mayor a 1000)
UNION
UNION ALL
INTERSECT
EXCEPT


<T1> INNER JOIN <T2> on (t1.var = t2.var)	(es join pero con condicion (producto natural)) (from)


Operadores
* ;para seleccionar todos (atributos select)
Distinct ; no muestra tuplas con valores repetidos, muestra solo la primera		(select)

CONCAT (RTRIM(apellido), "," , RTRIM(nombre))	(select)(rtim corta el final)(concat concatena)
Var1 AS nombre ; As para renombrar	(select)
Nombre LIKE ‘juan%’; Que contenga juan
‘Juan%’ ; ignora lo que sigue o precede (‘%juan’)
"_ _ _" ; cualquier cadena con 3 caracteres
Lower/Upper(var); cambia case
var BETWEEN 100 and 200 ; (pasa si esta entre 100 y 200)(where)
"atr1 IS NOT NULL" ; fitra los atr1 que son null (where)
"WHERE idSocio IN (<subconjunto>)" ; agarra los idSocio que tambien devuelva el subconjutno


Operadores fecha 
(para una variable fecha)
MONTH (varFecha)= 8 (transforma a numerico el mes)
YEAR, MONTH, DAY, DATE, TIME, etc. (varFecha)

Funciones de agregacion:
(Se puede usar en el select y having)
Para mostrar algun atributo mas junto con una funcion de agregacion, la tabla debe estar agrupada por el atributo adicional que queremos mostrar (GROUP BY tabla.Genero)
Avg (<var>)		(promedio)
Min (<var>)
Max (<var>)		
Sum (<var>)		(suma de res)
Count (<var>) o (*)	(cuenta las tupals resultantes)

Operadores logicos
"AND"
"="

"*" multiplicar
"/"
"-"
"+"


COMPARACION DE CONJUNTOS
"WHERE montoCuota > SOME (<subconjunto>)"  (devuelve todo los valores menos el mas economico)
SOME siempre prosigue a (>, <, =, >=, <=, <>). Devuelve TRUE siempre que se cumpla la condicion para ALGUNA tupla del sub

"WHERE montoCuota >= ALL (<subconjunto>)" (devuelve el deporte con el monto mas caro)
ALL decuelve true si la condicion se cumple para todos las tuplas del subconjunto

"WHERE EXIST (<subconsulta>)" si la subconsulta retorna algo, el exists VERDADERO (se puede negar NOT EXIST)



VARIANTE DE PRODUCTO NATURAL
LEFT OUTER JOIN; Hace un inner join, y despues ademas agrega los conjuntos de la talba de la izq que no cumplieron
RIGHT outer JOIN; lo mismo que el LEFT, pero agregando la tabla de la derecha (deja vacio el resto de columnas del join)
FULL OUTER JOIN; hace un join de todos, los que cumplen, los de la iz y los de la derecha. Dejando en vacio las columnas que no corresponen




ALTAS
asociados=(id, nombre, calle, genero, date, edad)
INSERT INTO asociados ("Juan perez", "99 y 9 ", "masculino", 22-10-1994, 29)


BAJA
DELETE FROM asociados
WHERE genero = "masculino"
Si habria mas tablas que guarde relacion de entidad referencial, se deberia revisar si hay que borrar algo ahi tambien


MODIFICACION
UPDATE deportes
SET montoCuota = montoCuota *1,2
where nombre = "hockey"








