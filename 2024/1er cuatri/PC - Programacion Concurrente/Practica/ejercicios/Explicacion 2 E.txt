Todos los ejercicios de la explicacion de practica 2 (semaforos) hechos

Ej 1-
Hay C chicos y hay una bolsa con caramelos que nunca se vacía. Los chico de a
UNO van sacando de a UN caramelo y lo comen. Los chicos deben llevar la
cuenta de cuantos caramelos se han tomado de la bolsa.

int bolsa;
sem libre = 1;
int contador = 0;

Process Chicos [id: 0..C-1] {
	P (libre)
	TomarCaramelo()
	contador = contador + 1;
	V (libre)
	ComerCaramelo()	
	
}


Ej 2-
Hay C chicos y hay una bolsa con caramelos limitada a N caramelos. Los
chico de a UNO van sacando de a UN caramelo y lo comen. Los chicos deben
llevar la cuenta de cuantos caramelos se han tomado de la bolsa.


int bolsa = N
int contador = 0;
sem mutex = 1;

Process chicos [id: 0..C-1]{
	P (mutex)
	while (bolsa > 0){
		contador ++;
		bosla --;
		TomarCaramelo();
		V(mutex)
		ComerCaramelo()
		P(mutex)
	}
	V(mutex)
	
}


Ej 3-
Hay C chicos y hay una bolsa con caramelos limitada a N caramelos
administrada por UNA abuela. Cuando todos los chicos han llegado llaman a
la abuela, y a partir de ese momento ella N veces selecciona un chico
aleatoriamente y lo deja pasar a tomar un caramelo.

int bolsa = N;
int llegaron = 0;
sem estanTodos = 0;
sem mutex = 1;
sem turno[C] = (0..C-1 = 0)
sem termino = 0;
boolean quedan = true;

Process chico [id: 0..C-1]{

	P(mutex)
	llegaron ++;
	if (llegaron = C) V(estanTodos)
	V (mutex)
	

	P (turno[id])
	while (quedan){
		TomarCaramelo();
		bolsa --;
		V (termino)
		P (turno[id])
	}
}


Process abuela {
	P (estanTodos);

	while (bolsa > 0) {
		nTurno = random (0, C-1);
		V(turno[nTurno]);
		P (termino)
	}
	quedan = false;
	for i= 0..C-1 { V(turno[i])}
}



Ej 4-
En una empresa de genética hay N clientes que envían secuencias de ADN para
que sean analizadas y esperan los resultados para poder continuar. Para resolver
estos análisis la empresa cuenta con 1 servidores que resuelve los pedidos de
acuerdo al orden de llegada de los mismos.

sem mutex = 1;
cola colaEspera;
sem resultados_listos[N] = (0..N: 0);
text resultados[N];
sem llegoPedido = 0;

Process Cliente [id: 0..N-1] {
	text ADN = getSecuenciaADN();
	text respuesta;
	
	P (mutex)		//NO SE SI ES NECESARIO EL PROTECT XQ SON ATOMICAS (CREO)
	Push (colaEspera, (id, ADN));
	V (mutex) 		//en la explicacion lo bloquean asiq entiendo q es necesario
	V(llegoPedido);

	P(resultados_listos[id]);
	respuesta = resultados[id];	
}


Process Empresa {
	text sec, res;
	int usuario;

	while (true) {
		P(llegoPedido);
		P (mutex)
		Pop (colaEspera, (usuario, sec));
		V (mutex)
		AnalizarSecuencia(sec, res);
		resultados[usuario] = res;
		V (resultados_listos[usuario])		
	}


}




Ej 5-
En una empresa de genética hay N clientes que envían secuencias de ADN para
que sean analizadas y esperan los resultados para poder continuar. Para resolver
estos análisis la empresa cuenta con 2 servidores que van alternando su uso para
no exigirlos de más (en todo momento uno está trabajando y el otro
descansando); cada 5 horas cambia en servidor con el que se trabaja. El servidor
que está trabajando, toma un pedido (de a uno de acuerdo al orden de llegada de
los mismos), lo resuelve y devuelve el resultado al cliente correspondiente.
Cuando terminan las 5 horas se intercambian los servidores que atienden los
pedidos. Si al terminar las 5 horas el servidor se encuentre atendiendo un
pedido, lo termina y luego se intercambian los servidores.



sem mutex = 1;
cola colaEspera;
sem resultados_listos[N] = (0..N: 0);
text resultados[N];
sem llegoPedido = 0;

boolean termino = false;
sem empezo = 0;
sem turnoServidor [2] = (1,0);

Process Cliente [id: 0..N-1] {
	text ADN = getSecuenciaADN();
	text respuesta;
	
	P (mutex)		//NO SE SI ES NECESARIO EL PROTECT XQ SON ATOMICAS (CREO)
	Push (colaEspera, (id, ADN));
	V (mutex) 		//en la explicacion lo bloquean asiq entiendo q es necesario
	V(llegoPedido);

	P(resultados_listos[id]);
	respuesta = resultados[id];	
}


Process Empresa [id: 0..1]{
	text sec, res;
	int usuario;
	
	while (true) {
		P(turnoServidor[id])
		V(empezo)
		termino = false;	
	
		while (NOT termino) {
			P(llegoPedido);
			if (NOT termino && NOT empty (colaEspera){
				P (mutex)
				Pop (colaEspera, (usuario, sec));
				V (mutex)
				AnalizarSecuencia(sec, res);
				resultados[usuario] = res;
				V (resultados_listos[usuario])
			}		
		}
		V(turnoServidor[1-id])
	}
}

Process Reloj {
	while (true){
		P(empezo);
		delay(5hs);
		termino = true;
		V (llegoPedido)
	}
}
//No estoy seguro si esta bien, para mi si pero al resolverla distinto q la explicacion no estoy seguro si se me escapa algo


Ej 6-
En una montaña hay 30 escaladores que en una parte de la subida deben
utilizar un único paso de a uno a la vez y de acuerdo al orden de llegada al
mismo

cola colaEspera;
sem mutex = 1;
boolean pasoLibre = true;
sem turno[30] = ([30] 0);


Process escaladores [id: 0..29]{
	int turnoActual;

	P(mutex)
	if (not estaLibre {
		Push (colaEspera, id);
		V(mutex)
		P(turno[id])
	} else {
		estaLibre = false;
		V(mutex)
	}
	
	UsarPaso()

	P(mutex)
	if not empty(colaEspera) {
		Pop (colaEspera, turnoActual)
		V(turno[turnoActual])			
	} else pasoLibre = true;
	V(mutex)
}
















