ACID
Atomicidad: Se ejecuta toda la transaccion o no se ejecuta nada.
Consistencia: El codigo deebe eestar bien formulado, no hay nada que hacer contra eso
Isolation: Cada transaccion ignora al resto, actua como unica
Durabilidad: Una transaccion realizada no puede ser desecha ni cambiada, sin importar ningun error







Fallo de transacciones

Registro historico / bitacora
	La bitacora se hace ANTES de empezar la transaccion, se registra todas las operaciones de modificacion
	Se hace write bitacora, write BD, read bitacora, read BD
	<T start>, <T, A, 2100> , <T Commit>

	Modificacion diferida
	Las operaciones write se aplazan hasta estado parcialmente cometida, recien ahi se actualiza bitacora y BD
	El resto de operacioness se resuelven antees en su orden
	Ante un fallo, se hace un redo de todas las transacciones que tengan start y commit
	Ignora las que no lo tengan


	Modificacion Inmediata
	Se actualiza la DB mientras se realiza la transaccion
	Se deben guardar los valores viejos
	Ante un fallo si tiene start y commit se hac un REDO
	Ante un fallo si tiene start pero no commit, se hace un UNDO

Condicion de idempotencia:
	El REDO o UNDO se realizen una o mil veces siempre van a dar lo mismo

Punto ded verificacion / checkpoint
	Se realizan cuando estoy seguro que una transaccion se realizo correctamente
	Evita hacer REDO o UNDO de toda la bitacora
	Realizar un checkpoint consume tiempo 



Doble paginacion
	Ideal para entornos monousuarios
	La recuperacion es muy rapida, con pocos accesos a disco
	Se posee una tabla de paginas sombra y tabla de paginas actual, ambas del mismo tamao
	Las paginas son la memoria
	La sobra posee una pagina con los datos corroborados
	La actual es la pagina donde se van haciendo los cambios
	Si se completa una trnasaccion, el marco sombra pasa a apuntas a la pagina actual.
	Despues de un fallo simplemente se cargan todas las paginas sombra en memoria


Entonrno COncurrente / Centralizado

	Seriabilidad, es decir ejecutar primero t1 o t2 y depues el restante, garantiza consistencia, pero muy lento es lo mismo que un monousuario


	Protocolo Bloqueo:
	Se bloquea un dato, de manera compartida (Es decir todo lo pueden leer) o de manera exclusiva (solo uno puede acceder y lo puede cambiar L/E)

	DeadLock o abrazo mortal(?:
 es basiacamente cuando un nosotros bloqueamos cierto dato que otro recurso tambien requiere, y nosotros requerimos un recurso que esta bloqueando el otro dato. Es decir para debloquear el dato reuqeirmos quye el segundo recurso lo libere y viceversa.
Se soluciona eligiendo una operacion victima y abortandola

	Protocolo de bloqueo:
	Garantiza la integriadad.
	Establece que las transacciones se componene de 2 fases. Una de bloqueo donde se pideen TODOS los datos a 	usar, y una de decrecimiento donded se liberan todos lso datos pedidos



	Protocolo basado en hora de entrada
	No genera deadlock y conntrola la incosistencia
	Los datos guardan cuando fue la ultima lectura y cuando la ultima esctiruta
	Las transacciones saben de cuando son

	Una transaccion puede leer un dato si la ultima modificacion fue antes que la fecha de la transaccion, y se actualiza la fecha de lectura con el valor mas grande
	Una transaccion puede modificar un dato si la ultima lectura y escritura del dato son anterriores a la fecha de la transaccion, se actualiza el tiempo de escritura del dato






Lo mas normal es bloquear tupla / registros.
Pero hay distintos niveles de GRANULADIDAD. Se puede bloquear por atributos, registros, tablas, areas o la BD completa



Durabilidad:
Para respetar la durabilidad se debe empezar, comitear y liberar los datos. Es decir hasta que no se comitea  no se liberan los datos con los que se trabajo.
Las transacciones sobre un mismo dato DEBEN trabajar siempre de manera secuencial. 


Los checkpoint en entornos concurrentees ademas de marcar hasta donde estan bien las transacciones, tiene una lista de las transacciones activas al momento del mismo.



	